//PointLight[2]
    glUniform3f(glGetUniformLocation(multlightmodelShaderProgram.getShaderProgramID(),"plight[2].color"),0.0,0.0,1.0);
    glUniform3f(glGetUniformLocation(multlightmodelShaderProgram.getShaderProgramID(),"plight[2].pos"),pointLightPositions[2].x,pointLightPositions[2].y,pointLightPositions[2].z);
    glUniform1f(glGetUniformLocation(multlightmodelShaderProgram.getShaderProgramID(),"plight[2].constant"),1.0);
    glUniform1f(glGetUniformLocation(multlightmodelShaderProgram.getShaderProgramID(),"plight[2].linear"),1.0);
    glUniform1f(glGetUniformLocation(multlightmodelShaderProgram.getShaderProgramID(),"plight[2].quadratic"),1.0);
    glUniform3f(glGetUniformLocation(multlightmodelShaderProgram.getShaderProgramID(),"plight[2].ambient"),0.1,0.1,0.1);
    glUniform3f(glGetUniformLocation(multlightmodelShaderProgram.getShaderProgramID(),"plight[2].diffuse"),0.5,0.5,0.5);
    glUniform3f(glGetUniformLocation(multlightmodelShaderProgram.getShaderProgramID(),"plight[2].specular"),1.0,1.0,1.0);

        float data[] = {1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,
                    0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,
                    1.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,
    };
    unsigned int a[2];
    glGenBuffers(1,&a[0]);
    glGenVertexArrays(1,&a[1]);
    glBindVertexArray(a[1]);
    glBindBuffer(GL_ARRAY_BUFFER,a[0]);
    glBufferData(GL_ARRAY_BUFFER,sizeof(data),data,GL_STATIC_DRAW);
    glVertexAttribPointer(0,3,GL_FLOAT,GL_FALSE,8*sizeof(float),(void*)0);
    glEnableVertexAttribArray(0);
    glVertexAttribPointer(1,2,GL_FLOAT,GL_FALSE,8*sizeof(float),(void*)(3*sizeof(float)));
    glEnableVertexAttribArray(1);
    glVertexAttribPointer(2,3,GL_FLOAT,GL_FALSE,8*sizeof(float),(void*)(5*sizeof(float)));
    glEnableVertexAttribArray(2);